-- SELECT  
-- last_name,
-- first_name,
-- points,
-- (points * 10) + 100 AS 'discount_factor'
--  FROM customers
-- -- WHERE customer_id =1,
-- -- ORDER BY first_name
-- SELECT DISTINCT state FROM sql_store.customers; 

-- SELECT name,
-- 	unit_price,(unit_price * 1.1) AS "New Price" FROM products
-- SELECT * FROM customers WHERE points > 3000;
-- SELECT * FROM customers WHERE state = "VA";
-- SELECT * FROM customers WHERE state != "VA";
-- SELECT * FROM customers WHERE state <> "VA";
-- SELECT * FROM customers WHERE birth_date != "1990-01-01";
-- SELECT * FROM orders WHERE order_date >= "2019-01-01" ;
-- SELECT * FROM customers WHERE birth_date >= "1990-01-01" AND points > 1000;
-- SELECT * FROM customers WHERE birth_date >= "1990-01-01" OR (points > 1000 AND state = 'VA');
-- SELECT * FROM customers WHERE NOT birth_date >= "1990-01-01" OR (points); 
-- SELECT * FROM order_items WHERE (unit_price * quantity) > 30  AND order_id = 6;

-- SELECT * FROM customers WHERE state="VA" OR state="FL" OR state="GA";
-- SELECT * FROM customers WHERE state IN ("VA","FL" ,"GA");
-- SELECT * FROM customers WHERE state NOT IN ("VA","FL" ,"GA");
-- SELECT * FROM products WHERE quantity_in_stock IN ("49","38","72");

-- SELECT * FROM customers WHERE points >=1000 AND points <=3000;
-- SELECT * FROM customers WHERE points BETWEEN 1000 AND 3000;
-- SELECT * FROM customers WHERE birth_date BETWEEN "1990/1/1" AND "2000/1/1";

-- SELECT * FROM customers WHERE last_name LIKE "b%";
-- SELECT * FROM customers WHERE last_name LIKE "brush%";
-- SELECT * FROM customers WHERE last_name LIKE "%b%";
-- SELECT * FROM customers WHERE last_name LIKE "b%"; 
-- SELECT * FROM customers WHERE last_name LIKE "_____y";
-- SELECT * FROM customers WHERE last_name LIKE "b____y";
-- -- % any number of char
-- -- _ to single charcter
-- SELECT * FROM customers WHERE address LIKE "%TRAIL%" OR address LIKE "%Avenue";
-- SELECT * FROM customers WHERE phone LIKE "%9"; 

-- REGEXP
-- SELECT * FROM customers WHERE last_name LIKE '%field%';
-- SELECT * FROM customers WHERE last_name REGEXP	'field';
-- SELECT * FROM customers WHERE last_name REGEXP	'^field';-- BEGINF ^
-- SELECT * FROM customers WHERE last_name REGEXP	'field$';-- END $
-- SELECT * FROM customers WHERE last_name REGEXP	'field|mac|rose';-- MAC OR FIELD |
-- SELECT * FROM customers WHERE last_name REGEXP	'^field|mac|rose';-- START WITH MAC OR FIELD |
-- SELECT * FROM customers WHERE last_name REGEXP	'field$|mac|rose';-- END WITH MAC OR FIELD |
-- SELECT * FROM customers WHERE last_name REGEXP	'[gim]e';-- WORD WITH G,I,M AND E
-- SELECT * FROM customers WHERE last_name REGEXP	'a[gim]';-- A AND WORD WITH G,I,M 
-- SELECT * FROM customers WHERE last_name REGEXP	'[a-h]e';-- A TO H  AND E
-- SELECT * FROM customers WHERE first_name REGEXP 'elka|ambur';
-- SELECT * FROM customers WHERE last_name REGEXP 'EY$|ON';
-- SELECT * FROM customers WHERE last_name REGEXP '^MY|SE';
-- SELECT * FROM customers WHERE last_name REGEXP 'B[R,U]';

-- SELECT * FROM customers WHERE phone IS NULL;
-- SELECT * FROM customers WHERE phone IS NOT NULL;
-- SELECT * FROM orders WHERE shipped_date IS NULL; 

-- SELECT * FROM customers ORDER BY first_name ; 
-- SELECT * FROM FIRST_NAME,LAST_NAME ORDER BY first_name DESC;-- DECENDING
-- SELECT * FROM customers ORDER BY state DESC, first_name;-- 1st order by state then first_name
-- SELECT *,quantity * unit_price AS total_price FROM order_items WHERE order_id = 2 ORDER BY total_price DESC ;


-- SELECT * FROM customers LIMIT 3; -- RETURN 3 RECORD
-- SELECT * FROM customers LIMIT 300;-- RETURN ALL RECORD
-- SELECT * FROM customers LIMIT 6,3 ; -- SKIP 6 RECORD THEN RETURN 3
-- SELECT * FROM customers ORDER BY POINTS DESC LIMIT 3;
-- Join
-- SELECT order_id,first_name,last_name,orders.customer_id 
-- FROM orders INNER JOIN customers c ON orders.customer_id = c.customer_id;
-- SELECT order_id,oi.product_id,quantity,oi.unit_price FROM order_items oi INNER JOIN products p ON oi.product_id = p.product_id;

-- USE sql_inventory;
-- SELECT * FROM sql_store.order_items oi JOIN sql_inventory.products p ON oi.product_id = p.product_id;

-- USE sql_hr;
-- SELECT e.employee_id,e.first_name,m.first_name AS manager
-- FROM employees e JOIN employees m ON e.reports_to = m.employee_id;

-- USE sql_store;

-- SELECT 
-- 	o.order_id,o.order_date,c.first_name,c.last_name,OS.NAME AS STATUS
-- FROM orders o
-- JOIN customers c ON o.customer_id = c.customer_id
-- JOIN order_statuses os ON o.status = os.order_status_id;


-- USE sql_invoicing;
-- SELECT payments.date,
-- 	   payments.invoice_id, 
-- 	   payments.amount,
-- 	   c.name,p.name 
--        FROM payments 
-- JOIN payment_methods p ON payments.payment_id = p.payment_method_id
-- JOIN clients c ON payments.client_id = c.client_id;


-- USE sql_store;
-- SELECT * FROM order_items oi
-- JOIN order_item_notes oin 
-- 	ON oi.order_Id = oin.order_id 
-- 	AND oi.product_id = oin.product_id;

-- Implicit join 
-- SELECT * FROM orders o JOIN customers c ON o.customer_id = c.customer_id; 
-- SELECT * FROM orders o,customers c WHERE o.customer_id = c.customer_id; -- DONT USE..

-- OUTERJOIN
-- SELECT c.customer_id,c.first_name,
-- 	   o.order_id	
-- 	   FROM customers c 
--        LEFT JOIN orders o ON c.customer_id = o.customer_id;
-- SELECT p.product_id,p.name, oi.quantity
-- FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id;

-- OUTER JOIN MULTIPLE TABLE
-- SELECT c.customer_id,c.first_name,o.order_id,
-- 		sh.name AS shipper
-- FROM customers c 
-- LEFT JOIN orders o 
-- 	ON c.customer_id = o.customer_id
-- LEFT JOIN shippers sh 
-- 	ON o.shipper_id = sh.shipper_id
-- ORDER BY c.customer_id;

-- SELECT o.order_id,o.order_date,
--  c.first_name AS customer,sh.name AS shipper ,os.name AS Status
--  FROM orders o 
--  JOIN  customers c ON c.customer_id = o.customer_id 
--  LEFT JOIN shippers sh ON o.shipper_id = sh.shipper_id
--  JOIN order_statuses os ON o.status = os.order_status_id
--  ORDER BY c.customer_id;

-- USE sql_hr;
-- SELECT e.employee_id,e.first_name,m.first_name AS manager
-- FROM employees	e 
-- LEFT JOIN employees m ON e.reports_to = m.employee_id;
-- USE sql_store;

-- SELECT o.order_id,c.first_name
-- FROM orders o 
-- JOIN customers c 
-- ON o.customer_id = c.customer_id

-- SELECT o.order_id,c.first_name
-- FROM orders o 
-- JOIN customers c 
-- USING(customer_id);


-- SELECT * FROM order_items oi JOIN order_item_notes oin USING(order_id,product_id);

-- USE sql_invoicing;
-- SELECT 
-- p.date,c.name AS clients,
-- p.amount ,pm.name AS payment_method
--  FROM payments p 
-- JOIN clients c USING(client_id)
-- JOIN  payment_methods pm
-- 	ON p.payment_method = pm.payment_method_id;

-- USE sql_store;
-- SELECT	o.order_id,c.first_name  FROM orders o NATURAL JOIN customers c;

-- SELECT * FROM customers c CROSS JOIN products p;-- Join together
-- SELECT * FROM shippers s CROSS JOIN products p; -- EXPLICIT
-- SELECT * FROM shippers s , products p;-- IMPLICITE

-- SELECT order_id,order_date, "ACTIVE" AS status FROM orders WHERE order_date >='2019-01-01' 
-- UNION
-- SELECT order_id,order_date, "ARCHIEVED" AS status FROM orders WHERE order_date <'2019-01-01';

-- SELECT  first_name FROM customers 
-- UNION
-- SELECT  name FROM shippers;

-- SELECT customer_id,first_name,points,"BRONZE" AS status FROM customers WHERE points < 2000
-- UNION
-- SELECT customer_id,first_name,points,"SILVER" AS status FROM customers WHERE points BETWEEN 2000 AND 3000
-- UNION 
-- SELECT customer_id,first_name,points,"GOLD" AS status FROM customers WHERE points > 3000
-- ORDER BY first_name

-- INSTERT ROW
-- INSERT	INTO customers 
-- VALUES(DEFAULT,'john','Smith','1990-01-01',NULL,'Address','city','CA',DEFAULT); -- NON SPECIFIC

-- INSERT	INTO customers (first_name,last_name,birth_date,address,city,state)
-- VALUES('john','Smith','1990-01-01','Address','city','CA');-- SPECIFIC

-- INSERT INTO shippers(name) VALUES('Shipper1'),('Shipper2'),('Shipper1'); -- MULTIPLE SHIPPER 
-- INSERT INTO products VALUES(DEFAULT,'Product1','2','3.2'),(DEFAULT,'Product2','3','4.2'),(DEFAULT,'Product3','4','4.2');

-- INSERT DATA MULTIPLE TABLE
-- INSERT INTO orders(customer_id,order_date,status) VALUES(1,'2019-01-02',1);
-- INSERT INTO order_items VALUES (LAST_INSERT_ID(),1,1,2.9),(LAST_INSERT_ID(),2,1,3.94);

-- CREATING COPY OF TABLE
-- CREATE TABLE order_archived AS SELECT * FROM orders;-- all table
-- INSERT INTO orders_archived SELECT * FROM orders WHERE order_date < '2019-01-01'
-- USE sql_invoicing;
-- CREATE TABLE invoices_archived AS
-- SELECT i.invoice_id,i.number,c.name AS client,i.invoice_total,i.payment_total,i.invoice_date,i.payment_date,i.due_date 
-- FROM invoices i 
-- JOIN clients c USING(client_id)
-- WHERE payment_date IS NOT NULL;

-- UPDATE 	invoices SET payment_total = 10,payment_date = '2019-01-01'
-- WHERE invoice_id = 1;

-- MULTIPE RECORD UPDATE
-- USE sql_invoicing;
-- UPDATE invoices SET payment_total = invoice_total * 0.5,payment_date = due_date
-- WHERE client_id =3

-- SUB QUERIES
-- UPDATE invoices SET payment_total = invoice_total * 0.5,payment_date = due_date
-- WHERE client_id = (SELECT client_id FROM clients WHERE name="Myworks")-- UPDATE SINGLE QUERY

-- UPDATE invoices SET payment_total = invoice_total * 0.5,payment_date = due_date
-- WHERE client_id = (SELECT client_id FROM clients WHERE state IN ('CA','NY'))-- UPDATE SINGLE QUERY

-- USE sql_store;
--  UPDATE orders SET comments="GOLD CUSTOMER" WHERE customer_id IN(
--  SELECT customer_id FROM customers WHERE points > 3000); 

-- USE sql_invoicing;
-- DELETE FROM invoices WHERE client_id = (
-- 						SELECT * FROM clients WHERE name="Myworks"
-- 						);




----------------------------

-- USE sql_store;
-- SELECT 
-- 	order_id ,
-- 	CASE	
-- 		WHEN YEAR(order_date) = YEAR(NOW()) THEN 'ACTIVE'
-- 		WHEN YEAR(order_date) = YEAR(NOW())-1 THEN 'lASE YEAR'
--         WHEN YEAR(order_date) < YEAR(NOW()) - 1 THEN 'ARCHIVED'
--         ELSE 'FUTURE'
-- 	END AS category
-- FROM orders;
-- SELECT CONCAT(first_name ,' ',last_name) ,points ,	CASE 
--     WHEN points >3000 THEN 'GOLD'
--     WHEN points < 3000 AND points >2000  THEN'SILVER'
--     WHEN points < 2000 THEN 'BRONZE'
--     END AS category
-- 	FROM customers
--     ORDER BY category

-- USE sql_invoicing;
-- -- CREATE VIEW
-- CREATE VIEW sales_by_clients AS 
-- SELECT 
-- 	c.client_id,c.name,SUM(invoice_total) AS total_sales
--     FROM clients c 
--     JOIN invoices i USING(client_id)
--     GROUP BY client_id,name;
    
-- SELECT * FROM sql_invoicing.sales_by_clients
-- 	ORDER BY total_sales;

-- CREATE OR REPLACE VIEW client_balance AS 
-- SELECT c.client_id,c.name,SUM(invoice_total-payment_total) AS BALANCE
-- 	FROM clients c
-- 	JOIN invoices i USING(client_id)
--     GROUP BY client_id,name;

-- DROP VIEW clients_balance 

-- CREATE OR REPLACE VIEW invoices_with_balance AS 
-- SELECT 
-- 	invoice_id,
-- 	number,
-- 	client_id,
-- 	invoice_total,
-- 	payment_total,
--     invoice_total - payment_total AS 'Balance',
--     invoice_date,
--     due_date,
--     payment_date
-- 	FROM invoices
-- 	WHERE (invoice_total - payment_total) > 0
--     WITH CHECK OPTION
-- DELETE FROM invoices_with_balance
-- 	WHERE invoice_id =1;

-- UPDATE invoices_with_balance 
-- SET payment_total = invoice_total
-- WHERE invoice_id =2

 -- DROP PROCEDURE IF EXISTS get_clients_by_state;
-- DELIMITER $$
-- CREATE PROCEDURE get_clients_by_state(state CHAR(2))-- NY
-- BEGIN 
-- 	SELECT * FROM clients c
--     WHERE c.state = state;
-- END $$

-- DELIMITER ;

-- PASSING PARAMTER TO PROCEDURE
-- DROP PROCEDURE IF EXISTS get_invoices_by_clients;
-- DELIMITER $$ 
-- CREATE PROCEDURE get_invoices_by_clients(client_id INT(11))
-- BEGIN
-- 	SELECT * FROM invoices i
--     WHERE i.client_id = client_id;
-- END $$
-- DELIMITER ;

-- DEFALUT PARAMETER

-- DROP PROCEDURE IF EXISTS get_clients_by_state;
-- DELIMITER $$
-- CREATE PROCEDURE get_clients_by_state(state CHAR(2))-- NY
-- BEGIN 
-- 	IF state IS NULL THEN 
-- 		-- SET state = 'CA';
--         SELECT * FROM clients;
-- 	ELSE 
-- 		SELECT * FROM clients c
-- 		WHERE c.state = state;
-- 	END IF;
-- END $$
-- DELIMITER ;

-- DROP PROCEDURE IF EXISTS get_clients_by_state;
-- DELIMITER $$
-- CREATE PROCEDURE get_clients_by_state(state CHAR(2))-- NY
-- BEGIN 
-- 		SELECT * FROM clients c
-- 		WHERE c.state = IFNULL(state,c.state);
-- END $$
-- DELIMITER ;

-- DROP PROCEDURE IF EXISTS get_payments;
-- DELIMITER $$
-- CREATE PROCEDURE get_payments(client_id INT,payment_method TINYINT)
-- BEGIN 
-- 	SELECT *
--     FROM paymentS p 
--     WHERE p.client_id = IFNULL(client_id,p.client_id) AND 
--     p.payment_method = IFNULL(payment_method_id,payment_method);
-- END

-- SELECT 
-- 	client_id,
--     name ,
--     risk_factor_for_client(client_id) AS risk_factor
-- FROM clients

-- trigger
-- DELIMITER $$

-- CREATE TRIGGER payments_after_insert
-- 	AFTER INSERT ON payments
--     FOR EACH ROW  
-- BEGIN 
-- 	UPDATE invoices
--     SET payment_total = payment_total + NEW.amount
--     WHERE invoice_id = NEW.invoice_id;
-- END $$

-- DELIMITER ;

-- DELIMITER $$
-- CREATE TRIGGER payments_after_delete
-- BEFORE DELETE ON  payments
-- 	FOR EACH ROW
-- BEGIN
-- UPDATE invoices
-- 	SET payment_total = payment_total - OLD.amount
-- 	WHERE invoice_id = OLD.invoice_id;
-- END $$
-- DELIMITER ;

-- DROP TRIGGERS IF EXISTS payments_after_insert'


-- SHOW VARIABLES LIKE'event%';
-- SET GLOBAL event_scheduler = ON;
-- SHOW VARIABLES LIKE'event%';
-- EVENTS
-- DELIMITER $$
-- CREATE EVENT yearly_delete_state_autdit_rows
-- ON SCHEDULE 
-- 	-- AT '2019=05-01'
--     EVERY 1 YEAR STARTS '2019-01-01' ENDS '2029-01-01'
-- DO BEGIN
-- 	DELETE FROM payments_audit
-- 	WHERE action_date < NOW() - INTERVAL 1 YEAR;

-- END $$
-- DELIMITER ;

--  SHOW EVENTS LIKE'yearly%';
-- DROP EVENT IF EXISTS yearly_delete_state_autdit_rows;
 -- ALTER EVENT yearly_delete_state_autdit_rows ENABLE;
-- SHOW EVENTS LIKE'yearly%';

-- TRANSACTION
